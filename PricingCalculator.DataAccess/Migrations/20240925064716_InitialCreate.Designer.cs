// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PricingCalculator.DataAccess;

#nullable disable

namespace PricingCalculator.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240925064716_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PricingCalculator.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FreeDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7b2c1b1-84c3-4e51-ade6-d2ab5043ed15"),
                            FreeDays = 0
                        },
                        new
                        {
                            Id = new Guid("3aeb3a2f-0e8d-4b88-b33c-5bc15b68b98b"),
                            FreeDays = 200
                        });
                });

            modelBuilder.Entity("PricingCalculator.Domain.Entities.CustomerService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CustomerPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(4, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(4, 2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("DiscountEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DiscountStart")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ServiceStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CustomerServices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2817f57-5f7b-49ef-ba34-adf98a832e3f"),
                            CustomerId = new Guid("d7b2c1b1-84c3-4e51-ade6-d2ab5043ed15"),
                            ServiceId = new Guid("5e162f58-1f6d-4db0-b59f-c82e50aa7b4b"),
                            ServiceStartDate = new DateTime(2019, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dc1f0d4c-ac34-4aa2-aa95-6f07def2de2e"),
                            CustomerId = new Guid("d7b2c1b1-84c3-4e51-ade6-d2ab5043ed15"),
                            Discount = 0.20m,
                            DiscountEnd = new DateTime(2019, 9, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountStart = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = new Guid("b597eaab-7ab2-4c67-9fd0-c44b9c8b79e0"),
                            ServiceStartDate = new DateTime(2019, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fff67807-cc3e-4c43-b38f-3b7afd71d6d1"),
                            CustomerId = new Guid("3aeb3a2f-0e8d-4b88-b33c-5bc15b68b98b"),
                            Discount = 0.30m,
                            DiscountEnd = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountStart = new DateTime(2018, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = new Guid("a063fe8d-78e4-4fd5-86a2-57e9f8c5b44e"),
                            ServiceStartDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b9e1eb9e-0bb1-41f0-a7aa-bd140421f7c0"),
                            CustomerId = new Guid("3aeb3a2f-0e8d-4b88-b33c-5bc15b68b98b"),
                            Discount = 0.30m,
                            DiscountEnd = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountStart = new DateTime(2018, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = new Guid("b597eaab-7ab2-4c67-9fd0-c44b9c8b79e0"),
                            ServiceStartDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("PricingCalculator.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<bool>("IsWorkingDayService")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e162f58-1f6d-4db0-b59f-c82e50aa7b4b"),
                            BasePrice = 0.2m,
                            IsWorkingDayService = true,
                            Name = "Service A"
                        },
                        new
                        {
                            Id = new Guid("a063fe8d-78e4-4fd5-86a2-57e9f8c5b44e"),
                            BasePrice = 0.24m,
                            IsWorkingDayService = true,
                            Name = "Service B"
                        },
                        new
                        {
                            Id = new Guid("b597eaab-7ab2-4c67-9fd0-c44b9c8b79e0"),
                            BasePrice = 0.4m,
                            IsWorkingDayService = false,
                            Name = "Service C"
                        });
                });

            modelBuilder.Entity("PricingCalculator.Domain.Entities.CustomerService", b =>
                {
                    b.HasOne("PricingCalculator.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerServices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PricingCalculator.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("PricingCalculator.Domain.Entities.Customer", b =>
                {
                    b.Navigation("CustomerServices");
                });
#pragma warning restore 612, 618
        }
    }
}
